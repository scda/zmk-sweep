/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>


// layers
#define ZOF 0
#define NUM 1
#define FN 2
#define SYM 3
#define NAV 4
#define FUN 5

// modifier combinations
#define HYP LG(LS(LA(LCTRL)))

// mod-tap combinations
#define CH LCTRL H
#define AA LALT A
#define GE LGUI E
#define SI LSHFT I

#define CS LCTRL S
#define AN LALT N
#define GR LGUI R
#define ST LSHFT T

#define COMBO(NAME, BINDINGS, TIMEOUT, KEYPOS) \
  combo_##NAME { \
    timeout-ms = <TIMEOUT>; \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
    layers = <0>; \
  };

// mod-tap config
&mt {
  flavor = "tap-preferred";
  tapping_term_ms = <300>;
};

// caps-word config
&caps_word {
    continue-list = <UNDERSCORE MINUS BACKSPACE>;
};

// sticky-key config
&sk {
    release-after-ms = <2000>;
};

/ {
    macros {
      tridot: tripple_dot {
        label = "tripple_dot";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings = <&kp DOT &kp DOT &kp DOT>;
      };
    };
  
    combos {
      compatible = "zmk,combos";
      
      // do not use home-row-mod keys (10-13 + 16-19)
      COMBO(funl, &to FUN, 100, 0 4)
      COMBO(funr, &to FUN, 100, 5 9)
      
      COMBO(hypr, &sk HYP, 100, 4 5)
      COMBO(caps, &caps_word, 100, 20 29)
      
      COMBO(undo, &kp LG(Z), 100, 0 9)
      COMBO(cut, &kp LG(X), 100, 1 8)
      COMBO(copy, &kp LG(C), 100, 2 7)
      COMBO(past, &kp LG(V), 100, 3 6)
      
      COMBO(tab, &kp TAB, 100, 14 15)
      COMBO(del, &kp DEL, 100, 24 25)
      COMBO(minus, &kp MINUS, 100, 23 26)
      COMBO(underscore, &kp UNDER, 100, 22 27)
    };

    behaviors {
      gqt: global-quick-tap {
        compatible = "zmk,behavior-hold-tap";
        label = "GLOBAL_QUICK_TAP";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <200>;
        quick-tap-ms = <125>;
        global-quick-tap;
        bindings = <&kp>, <&kp>;
      };

      lmt: left_hand_positional_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "LEFT_POSITIONAL_HOLD_TAP";
        #binding-cells = <2>;
        flavor = "tap-unless-interrupted";
        tapping-term-ms = <200>;
        quick-tap-ms = <150>;
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 35 36>;
      };

      rmt: right_hand_positional_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "RIGHT_POSITIONAL_HOLD_TAP";
        #binding-cells = <2>;
        flavor = "tap-unless-interrupted";
        tapping-term-ms = <200>;
        quick-tap-ms = <150>;
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31>;
      };

      tddc: dot-tap-dance {
        compatible = "zmk,behavior-tap-dance";
        label = "DOT_TAP_DANCE";
        #binding-cells = <0>;
        tapping-term-ms = <300>;
        bindings = <&kp DOT>, <&kp COLON>, <&tridot>;
      };

      tdcs: com-tap-dance {
        compatible = "zmk,behavior-tap-dance";
        label = "COM_TAP_DANCE";
        #binding-cells = <0>;
        tapping-term-ms = <300>;
        bindings = <&kp COMMA>, <&kp SEMI>;
      };
    };

    keymap {
      compatible = "zmk,keymap";

      // 0 - updated ZOF for less keys
      zof {
        bindings = <
          &kp ESC  &kp Z   &kp O   &kp F       &kp Y        &kp V    &kp G        &kp C   &kp L   &kp SLASH
          &lmt CH  &lmt AA &lmt GE &lmt SI     &kp U        &kp D    &rmt ST      &rmt GR &rmt AN &rmt CS
          &tdcs    &kp Q   &kp J   &kp K       &kp X		    &kp B    &kp P        &kp W   &kp M   &tddc
                                   &lt NUM SPC &kp RET      &kp LSFT &lt SYM BKSP 
        >;
		  };

      // 1 - numbers and symbols
      num {
        bindings = <
          &kp KP_PLUS &kp KP_MINUS &kp KP_MULTIPLY &kp KP_DIVIDE &none            &kp DOT   &kp N7  &kp N8 &kp N9 &none
          &sk LCTRL   &sk LALT     &sk LGUI        &sk LSHFT     &kp KP_EQUAL     &kp N0    &kp N4  &kp N5 &kp N6 &none
          &none       &none        &none           &tog NUM      &none            &kp COMMA &kp N1  &kp N2 &kp N3 &none
                                                   &trans        &trans           &mo FN    &mo NAV 
        >;
      };

      // 2 - f1-f12
      fn {
        bindings = <
          &none     &none    &none    &none     &none     &none  &kp F7  &kp F8 &kp F9 &kp F12
          &sk LCTRL &sk LALT &sk LGUI &sk LSHFT &none     &none  &kp F4  &kp F5 &kp F6 &kp F11
          &none     &none    &none    &none     &none     &none  &kp F1  &kp F2 &kp F3 &kp F10
                                      &trans    &trans    &trans &trans
        >;
		  };
		
      // 3 - symbols
		  sym {
        bindings = <
          &kp PIPE &kp DLLR  &kp LBRC &kp RBRC &kp PRCNT      &kp KP_PLUS  &kp LT    &kp GT   &kp TILDE &kp CARET
          &kp EXCL &kp QMARK &kp LPAR &kp RPAR &kp ASTRK      &kp KP_EQUAL &sk LSHFT &sk LGUI &sk LALT  &sk LCTRL
          &kp BSLH &kp AMPS  &kp LBKT &kp RBKT &kp HASH     	&kp AT       &kp DQT   &kp SQT  &kp GRAVE &kp LA(LS(N2))
                                      &mo NAV  &trans         &trans       &trans 
        >;
		  };	

      // 4 - navigation
		  nav {
        bindings = <
          &kp LG(NUBS) &none    &none    &none     &none        &none &kp HOME     &kp PG_DN         &kp PG_UP            &kp END
          &sk LCTRL    &sk LALT &sk LGUI &sk LSHFT &sk HYP      &none &kp LEFT     &kp DOWN          &kp UP               &kp RIGHT
          &none        &none    &none    &none     &none        &none &kp LA(LEFT) &kp LA(LS(LEFT))  &kp LA(LS(RIGHT))    &kp LA(RIGHT)
                                         &trans    &trans       &none &trans
        >;
		  };
		
      // 5 - media functions etc.
		  fun {
        bindings = <
          &none       &kp C_BRI_DEC &none      &kp C_BRI_INC &none       &none   &none   &none &none &kp LG(LC(Q))
          &none       &kp C_PREV    &kp C_PP   &kp C_NEXT    &none       &none   &none   &none &none &none
          &bootloader &kp C_VOL_DN  &kp C_MUTE &kp C_VOL_UP  &none       &none   &none   &none &none &bootloader
                                               &to ZOF       &to ZOF     &to ZOF &to ZOF
        >;
		  };

      // empty template
		  // empty {
      //   bindings = <
      //     &none &none &none &none &none     &none &none &none &none &none
      //     &none &none &none &none &none     &none &none &none &none &none
      //     &none &none &none &none &none     &none &none &none &none &none
      //                       &none &none     &none &none
      //   >;
		  // };
	};
};
